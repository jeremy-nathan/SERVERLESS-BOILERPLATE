# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ${env:SERVICE_NAME}
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
useDotenv: true
# variablesResolutionMode: 20210326

plugins:
  - serverless-plugin-ifelse
  - serverless-esbuild
  - serverless-dynalite2-local
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-plugin-warmup
  - serverless-deployment-bucket
  - serverless-certificate-creator
  - serverless-domain-manager
  - serverless-prune-plugin

custom:
  # env: ${file(env_config.js)}
  stage: ${opt:stage, 'stg'}
  appPrefix: ${env:APP_PREFIX}
  domain: ${env:DOMAIN}
  region: ${env:REGION, 'ap-southeast-1'}
  isLocal: ${env:IS_LOCAL, false}
  isCloudDb: ${env:IS_CLOUD_DB, true}
  esbuild:
    platform: node
    packager: yarn
    # packagerOptions:
    #   scripts:
    #     - yarn autoclean --init
    #     - rm .yarnclean && cat ../../.yarnclean >> .yarnclean && echo '\n*.ts' >> .yarnclean
    #     - yarn autoclean --force
    plugins: ./esbuild-plugins.js
    bundle: true
    minify: false
    sourcemap: true
    keepNames: true
    watch:
      pattern: ['src/**/*.ts', '.env*', 'serverless.yml', 'config/*'] # match only typescript files in src directory
      ignore: ['node_modules', '.serverless/**/*', '.esbuild/**/*', '.build']
  warmup:
    default:
      enabled: prod
      memorySize: 256
      prewarm: true
      timeout: 20
      tracing: false
      concurrency: 5
  serverlessIfElse:
    - If: '"${env:ENABLE_XRAY}" === "true"'
      Set:
        provider.tracing.apiGateway: true
        functions.apiLambda.tracing: 'Active'
        functions.sqsLambda.tracing: 'Active'
        custom.warmup.default.tracing: 'Active'
    - If: '"${self:custom.isLocal}" === "false"'
      Set:
        custom.esbuild.minify: true
        package.patterns:
          - config/**
    - If: '"${self:custom.isCloudDb}" === "false"'
      Set:
        custom.dynamodb.start.noStart: false
  dynalite:
    port: 8000
  serverless-offline:
    noPrependStageInUrl: true
    httpPort: ${env:HTTP_PORT}
    lambdaPort: ${env:LAMBDA_PORT}
  prune:
    automatic: true
    # includeLayers: true
    number: 5
  apiDomainsPrefix:
    prod: ''
    stg: stg-
  customDomain:
    domainName: '${self:custom.apiDomainsPrefix.${self:provider.stage}}${self:custom.domain}'
    basePath: ''
    stage: '${self:provider.stage}'
    # endpointType: 'regional'
    certificateName: '${self:custom.apiDomainsPrefix.${self:provider.stage}}${self:custom.domain}'
    createRoute53Record: true
  customCertificate:
    certificateName: '${self:custom.apiDomainsPrefix.${self:provider.stage}}${self:custom.domain}'
    hostedZoneNames: '${self:custom.domain}.'
    # region: ${self:custom.region}
    rewriteRecords: false

provider:
  name: aws
  profile: ${env:AWS_PROFILE, 'default'}
  runtime: nodejs14.x
  # lambdaHashingVersion: 20201221
  stackName: ${self:service}-${self:custom.stage}-serverless # Use a custom name for the CloudFormation stack
  apiName: ${self:custom.stage}-${self:service}-api # Use a custom name for the API Gateway API
  # endpointType: REGIONAL
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  deploymentBucket:
    name: ${self:custom.domain}.${self:custom.region}.deploys # Deployment bucket name. Default is generated by the framework
    # name: ${self:custom.domain}.${self:custom.region}.${self:custom.stage}.deploys
    blockPublicAccess: true
    serverSideEncryption: AES256
  deploymentPrefix: serverless
  iam:
    role: ${env:LAMBDA_ROLE}
    deploymentRole: ${env:CFN_ROLE}
  environment:
    NODE_ENV: ${env:NODE_ENV}
    NODE_OPTIONS: '--enable-source-maps'
    # MY_SECRET: ${file(../config.${self:provider.stage}.json):CREDS}
  # iamRoleStatements:
  #   - Effect: 'Allow'
  #     Action:
  #       - xray:PutTelemetryRecords
  #       - xray:PutTraceSegments
  #     Resource: '*'
  #   - Effect: 'Allow'
  #     Action:
  #       - 'lambda:InvokeFunction'
  #     Resource:
  #       - Fn::Join:
  #           - ':'
  #           - - arn:aws:lambda
  #             - Ref: AWS::Region
  #             - Ref: AWS::AccountId
  #             - function:${self:service}-${self:provider.stage}-*
  #       - Fn::Join:
  #           - ':'
  #           - - arn:aws:lambda
  #             - Ref: AWS::Region
  #             - Ref: AWS::AccountId
  #             - function:${self:service}-${self:provider.stage}-*
  tags: # Optional service wide function tags
    app: ${self:service}
  tracing:
    apiGateway: false
  apiGateway: # Optional API Gateway global config
    # apiKeys:
    #   - ${self:custom.stage}-${self:service}-apiKey
    # restApiId: xxxxxxxxxx # REST API resource ID. Default is generated by the framework
    # restApiRootResourceId: xxxxxxxxxx # Root resource ID, represent as / path
    # restApiResources: # List of existing resources that were created in the REST API. This is required or the stack will be conflicted
    #   '/users': xxxxxxxxxx
    #   '/users/create': xxxxxxxxxx
    metrics: false
    minimumCompressionSize: 1024
    binaryMediaTypes: # Optional binary media types the API might return
      - 'image/*'
  logs:
    restApi: # Optional configuration which specifies if API Gateway logs are used. This can either be set to true to use defaults, or configured via subproperties.
      accessLogging: true # Optional configuration which enables or disables access logging. Defaults to true.
      # format: 'requestId: $context.requestId' # Optional configuration which specifies the log format to use for access logging.
      executionLogging: true # Optional configuration which enables or disables execution logging. Defaults to true.
      level: INFO # Optional configuration which specifies the log level to use for execution logging. May be set to either INFO or ERROR.
      fullExecutionData: true # Optional configuration which specifies whether or not to log full requests/responses for execution logging. Defaults to true.
      role: ${env:APIGW_LOG_ROLE}
      roleManagedExternally: true
    # websocket: true # Optional configuration which specifies if Websockets logs are used
    frameworkLambda: true # Optional, whether to write CloudWatch logs for custom resource lambdas as added by the framework

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  individually: true
  patterns:
    - src/public/swagger.json
    - src/views/*
    - config/**

functions:
  apiLambda:
    handler: src/apiLambda.handler # required, handler set in AWS Lambda
    # runtime: provided # Custom runtime from layer
    # layers:
    #   - arn:aws:lambda:${self:custom.region}:553035198032:layer:nodejs12:19
    name: ${self:service}-${self:provider.stage}-api # optional, Deployed Lambda name
    description: ${self:service} API - ${self:provider.stage} # optional, Description to publish to AWS
    package:
      patterns:
        - src/public/swagger.json
        - src/views/*
    # iamRoleStatementsInherit: true
    # iamRoleStatements:
    #   - Effect: Allow
    #     Action:
    #       - dynamodb:DescribeTable
    #       - dynamodb:CreateTable
    #       - dynamodb:Query
    #       - dynamodb:Scan
    #       - dynamodb:GetItem
    #       - dynamodb:PutItem
    #       - dynamodb:UpdateItem
    #       - dynamodb:DeleteItem
    #     Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stage}_sh_crm_*'
    memorySize: 3008 # optional, in MB, default is 1024
    timeout: 30 # optional, in seconds, default is 6
    # vpc:
    #   securityGroupIds:
    #     - securityGroupId1
    #     - securityGroupId2
    #   subnetIds:
    #     - subnetId1
    #     - subnetId2
    events:
      - http:
          path: /
          method: GET
          cors: true
          authorizer: 'AWS_IAM'
          # private: true
          # authorizer: # An AWS API Gateway custom authorizer function
          #   name: dialogFlowAuthorizer # The name of the authorizer function (must be in this service)
          #   resultTtlInSeconds: 300
          #   identitySource: method.request.header.Authorization
          #   identityValidationExpression: Basic (.*)
          #   type: token # token or request. Determines input to the authorier function, called with the auth token or the entire request event. Defaults to token
      - http:
          path: /api/swagger.json
          method: GET
          cors: true
      - http:
          path: /api/healthcheck
          method: GET
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
          authorizer: 'AWS_IAM'
          # private: true
          # authorizer: # An AWS API Gateway custom authorizer function
          #   name: jwt-authorizer # The name of the authorizer function (must be in this service)
          #   resultTtlInSeconds: 3600
          #   identitySource: method.request.header.Authorization
          #   identityValidationExpression: Bearer (.*)
          # type: token # token or request. Determines input to the authorier function, called with the auth token or the entire request event. Defaults to token
    environment:
      SERVICE_NAME: ${self:service}
      APP_PREFIX: ${self:custom.appPrefix}
      DEBUG: ${env:DEBUG, false}
      IS_CLOUD_DB: ${self:custom.isCloudDb}
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
      AWS_XRAY_LOG_LEVEL: silent
      REGION: ${self:custom.region}
      ENABLE_XRAY: ${env:ENABLE_XRAY}
  # streamLambda:
  #   handler: src/streamLambda.handler
  #   name: ${self:service}-${self:provider.stage}-Stream # optional, Deployed Lambda name
  #   description: ${self:service} Stream Event - ${self:provider.stage} # optional, Description to publish to AWS
  #   memorySize: 3008 # optional, in MB, default is 1024
  #   timeout: 30 # optional, in seconds, default is 6
  #   events:
  #     - stream:
  #         arn: ${env:CASEQUEUE_STREAM_ARN}
  #         batchSize: 1
  #         startingPosition: LATEST
  #   environment:
  #     SERVICE_NAME: ${self:service}
  #     APP_PREFIX: ${self:custom.appPrefix}
  #     DEBUG: ${env:DEBUG, false}
  #     IS_CLOUD_DB: ${self:custom.isCloudDb}
  #     AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  #     AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
  #     AWS_XRAY_LOG_LEVEL: silent
  #     REGION: ${self:custom.region}
  # eventLambda:
  #   handler: handler.eventLambda
  #   events:
  #     - s3:
  #         bucket: ${self:custom.eventLambda.bucket}
  #         event: s3:ObjectCreated:POST
  #         rules:
  #           - prefix: files/
  #     - s3:
  #         bucket: ${self:custom.eventLambda.bucket}
  #         event: s3:ObjectCreated:PUT
  #         rules:
  #           - prefix: files/
  #   environment:
  #     SERVICE_NAME: ${self:service}
  #     APP_PREFIX: ${self:custom.appPrefix}
  #     DEBUG: ${self:custom.debug}
  #     IS_CLOUD_DB: ${self:custom.isCloudDb}
  #     DOCS_BUCKET: ${self:custom.eventLambda.bucket}
  #     AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  #     AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
  #     AWS_XRAY_LOG_LEVEL: silent
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#     TodosDynamoDbTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           -
#             AttributeName: id
#             AttributeType: S
#         KeySchema:
#           -
#             AttributeName: id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.DYNAMODB_TABLE}
#     NewResource:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: my-new-bucket
#   Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
